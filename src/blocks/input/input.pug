include ../arrow/arrow

mixin input({title='', type, width, placeholder, withSubscription=false, isExpandable=false, isFocused=false} = {})
  -const blockClass = 'input'
  -const titleClass = `${blockClass}__title`
  -const controlWrapperClass = `${blockClass}__control-wrapper`
  -const controlClass = `${blockClass}__control`
  -const classNames = [blockClass, titleClass, controlClass, controlWrapperClass]

  -const blockAttributes = {class: `${blockClass} `}
  -const titleAttributes = {class: `js-${titleClass} ${titleClass} `}
  -const controlWrapperAttributes = {class: `${controlWrapperClass} `}
  -const controlAttributes = {class: `js-${controlClass} ${controlClass} `,
  -  placeholder: placeholder}
  -const allAttributes = {blockAttributes, titleAttributes, controlAttributes, controlWrapperAttributes}

  each value, index in Object.values(allAttributes)
    case width
      when 'narrow'
        -value.class += `${classNames[index]}_width_narrow `
      when 'premedium'
        -value.class += `${classNames[index]}_width_premedium `
      when 'medium'
        -value.class += `${classNames[index]}_width_medium `

    if withSubscription
      -value.class += `${classNames[index]}_with-subscription `
    if isExpandable
      -value.class += `${classNames[index]}_expandable `
      -controlAttributes.readonly = true
    if isFocused
      -value.class += `${classNames[index]}_focused `

    case type
      when 'text'
        -value.class += `${classNames[index]}_type_text `
        -allAttributes.controlAttributes.type = 'text'
      when 'mask'
        -const stringToAdd = `${classNames[index]}_type_masked `
        -value.class += `js-${stringToAdd} ${stringToAdd} `

  label&attributes(allAttributes.blockAttributes)
    if title
      p&attributes(allAttributes.titleAttributes) #{title}
    div&attributes(allAttributes.controlWrapperAttributes)
      input&attributes(allAttributes.controlAttributes)
      if withSubscription
        div.input__arrow_with-subscription
          +arrow({type: 'enter', isColored: true, isBold: true})
      else if isExpandable
        div.input__arrow_expandable
          +arrow({type: 'expand'})
