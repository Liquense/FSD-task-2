include ../arrow/arrow
include ../title/title

mixin input({title='', type, width, placeholder, withSubscription=false, isExpandable=false, isFocused=false, text, inDropdown=false} = {})
  -const blockClass = 'input'
  -const controlClass = `${blockClass}__control`

  -const blockAttributes = {class: `js-${blockClass} ${blockClass}`}
  -const controlAttributes = {class: `js-${controlClass} ${controlClass}`, value: text, placeholder: placeholder}

  case width
    when 'narrow'
      -blockAttributes.class += ` ${blockClass}_width_narrow`
    when 'premedium'
      -blockAttributes.class += ` ${blockClass}_width_premedium`
    when 'medium'
      -blockAttributes.class += ` ${blockClass}_width_medium`

  if withSubscription
    -blockAttributes.class += ` ${blockClass}_with-subscription`
  if isExpandable
    -blockAttributes.class += ` ${blockClass}_expandable`
    -controlAttributes.readonly = true
  if isFocused
    -blockAttributes.class += ` ${blockClass}_focused`
  if inDropdown
    -blockAttributes.class += ` ${blockClass}_in-dropdown`

  case type
    when 'mask'
      -blockAttributes.class += ` ${blockClass}_type_masked`

  article&attributes(blockAttributes)
    if title
      div(class=`js-${blockClass}__title ${blockClass}__title`)
        +title({type: 'label', text: title})
    div(class=`js-${blockClass}__control-wrapper ${blockClass}__control-wrapper`)
      input&attributes(controlAttributes)
      if withSubscription
        div(class=`${blockClass}__arrow`)
          +arrow({type: 'enter', isColored: true, isBold: true})
      else if isExpandable
        div(class=`${blockClass}__arrow`)
          +arrow({type: 'expand'})
