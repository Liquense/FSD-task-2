include ../arrow/arrow
//- types: filled, bordered, text
mixin button({text = '', isTextSized = false, isLink = false, type = 'filled', size = '', decoration = '', isHovered = false} = {})
  - const blockClassName = 'button'
  - const borderClassName = `${blockClassName}__border`
  - const controlClassName = `${blockClassName}__control`
  - const decorationCN = `${blockClassName}__decoration`
  - const classNames = [blockClassName, borderClassName, controlClassName, decorationCN]

  - const blockAttributes = {class: `${blockClassName} ${blockClassName}_type_${type} `}
  - const borderAttributes = {class: `${borderClassName} ${borderClassName}_type_${type} `}
  - const controlAttributes = {class: `${controlClassName} ${controlClassName}_type_${type} `}
  - const decorationAttributes = {class: `${decorationCN} ${decorationCN}_type_${type} `}
  - const allAttributes = [blockAttributes, borderAttributes, controlAttributes, decorationAttributes]

  each value, index in Object.values(allAttributes)
    if isTextSized
      -value.class += ` ${classNames[index]}_text-sized `
    if isHovered
      -value.class += ` ${classNames[index]}_hovered `
    if size
      -value.class += ` ${classNames[index]}_size_${size} `
    if decoration
      -value.class += ` ${classNames[index]}_decorated `

  - function createButtonContent() {
    if type === 'bordered'
      div&attributes(borderAttributes)
        button&attributes(controlAttributes) #{text}
    else
      button&attributes(controlAttributes) #{text}
    if decoration === 'enter-arrow'
      div&attributes(decorationAttributes)
        +arrow({type: 'enter'})
  - }

  if isLink
    -blockAttributes.class += `js-${blockClassName}`
    a(class=blockAttributes.class)
      -createButtonContent()
  else
    div(class=blockAttributes.class)
      -createButtonContent()
