include ../arrow/arrow
//- types: filled, bordered, text
mixin button({text = '', isTextSized = false, isLink = false, type = 'filled', size = '', decoration = '', isHovered = false} = {})
  - const blockClassName = 'button'
  - const borderClassName = `${blockClassName}__border`
  - const controlClassName = `${blockClassName}__control`
  - const decorationCN = `${blockClassName}__decoration`
  - const classNames = [blockClassName, borderClassName, controlClassName, decorationCN]

  - const blockAttributes = {class: `${blockClassName} `}
  - const borderAttributes = {class: `${borderClassName} `}
  - const controlAttributes = {class: `${controlClassName} `}
  - const decorationAttributes = {class: `${decorationCN} `}
  - const allAttributes = [blockAttributes, borderAttributes, controlAttributes, decorationAttributes]

  each value, index in Object.values(allAttributes)
    if isTextSized
      -value.class += ` ${classNames[index]}_text-sized `
    if isHovered
      -value.class += ` ${classNames[index]}_hovered `
    if decoration
      -value.class += ` ${classNames[index]}_decorated `

    case size
      when 'wide'
        -value.class += ` ${classNames[index]}_size_${size} `

    -let validType = 'filled'
    case type
      when 'filled'
        -validType = 'filled'
      when 'bordered'
        -validType = 'bordered'
      when 'text'
        -validType = 'text'
    -value.class += `${classNames[index]}_type_${validType} `

  -const blockTag = isLink ? 'a' : 'div'
  -blockAttributes.class += `js-${blockClassName}`
  #{blockTag}(class=blockAttributes.class)
    button&attributes(controlAttributes) #{text}
    if decoration === 'enter-arrow'
      div&attributes(decorationAttributes)
        +arrow({type: 'enter'})
