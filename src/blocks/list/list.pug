include ../checkbox/checkbox
include ../radio-button/radio-button
include ../arrow/arrow

mixin list({type='', isExpandable=false, isNarrow=false, isOpened=false, title='', elements=[]} = {})
  -const listClass = 'list'
  -const titleClass = `${listClass}__title`
  -const containerClass = `${listClass}__container`
  -const classNames = [listClass, titleClass, containerClass]

  -const listAttributes = {class: `js-${listClass} ${listClass} `}
  -const titleAttributes = {class: `js-${titleClass} ${titleClass} `}
  -const containerAttributes = {class: `js-${containerClass} ${containerClass} `}
  -const allAttributes = [listAttributes, titleAttributes, containerAttributes]

  each value, index in allAttributes
    case type
      when 'radio'
        -value.class += `${classNames[index]}_type_radio `
      when 'toggle'
        -value.class += `${classNames[index]}_type_toggle `
      when 'checkbox'
      default
        -value.class += `${classNames[index]}_type_checkbox `

    if isExpandable
      -value.class += `${classNames[index]}_expandable `

  if isNarrow
    -titleAttributes.class += `${titleClass}_narrow `
  if isOpened
    -listAttributes.class += `${listClass}_expanded `

  fieldset&attributes(listAttributes)
    if title
      legend&attributes(titleAttributes) #{title}
      if isExpandable
        div.list__expand-arrow
          +arrow({type: 'expand'})
    div&attributes(containerAttributes)
      each value, index in elements
        -const itemClasses = `${listClass}__item ${listClass}__item_type_${type} `
        -  + `${value.description ? `${listClass}__item_rich` : ''}`
        div(class=itemClasses)
          if type === 'radio'
            +radioButton(value)
          else
            +checkbox(Object.assign(value, {type}))
