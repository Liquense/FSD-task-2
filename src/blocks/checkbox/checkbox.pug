mixin checkbox({isChecked=false, text='', type='', description} = {})
  -const checkboxClassName = 'checkbox'
  -const labelClassName = `${checkboxClassName}__label`
  -const textClassName = `${checkboxClassName}__text`
  -const inputClassName = `${checkboxClassName}__hidden-button`
  -const descriptionClassName = `${checkboxClassName}__description`
  -const classNames = [checkboxClassName, labelClassName, inputClassName, descriptionClassName, textClassName]

  -const checkboxAttrs = {class: `js-${checkboxClassName} ${checkboxClassName} `}
  -const labelAttrs = {class: `${labelClassName} `}
  -const inputAttrs = {class: `js-${inputClassName} ${inputClassName} `, type: 'checkbox'}
  -const descriptionAttrs = {class: `${descriptionClassName} `}
  -const textAttrs = {class: `${textClassName} `}
  -const allAttrs = [checkboxAttrs, labelAttrs, inputAttrs, descriptionAttrs, textAttrs]

  each value, index in Object.values(allAttrs)
    if description
      - value.class += `${classNames[index]}_rich `

    case type
      when 'toggle'
        - value.class += `${classNames[index]}_type_toggle `
        if isChecked
          - labelAttrs.class += `${labelClassName}_toggled `
      default
        - value.class += `${classNames[index]}_type_default `

  -inputAttrs["data-isChecked"] = `${isChecked}`
  div&attributes(checkboxAttrs)
    label&attributes(labelAttrs)
      p&attributes(textAttrs) #{text}
      input&attributes(inputAttrs)
      if description
        p&attributes(descriptionAttrs) #{description}
